## The R codes below shows a function called "makeCacheMatrix" that creates a special "matrix" M object that can cache its inverse and an other function called "cacheSolve" 
## which is a function that computes the inverse of the special "matrix" returned by the first function named as "makeCacheMatrix". 
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.


## Firstly, let's start by creating a matrix which can cache its inverse and call it "makeCacheMatrix".

makeCacheMatrix <- function(x = matrix()) {
        matrixinverse <- NULL
        set <- function(y) {
                x <<- y 
                matrixinverse <<- NULL
        }
        get <- function() x
        setinverse <- function(solve) matrixinverse <<- solve
        getinverse <- function() matrixinverse
        list(set = set, get = get,
             setinverse = setinverse,
             getinverse = getinverse)
}


## Lastly, let's create a function which is going to compute the inverse of the matrix returned by the function above.

cacheSolve <- function(x, ...) {
        matrixinverse <- x$getinverse()
        if(!is.null(matrixinverse)) {
                message("getting cached data")
                return(matrixinverse)
        }
        data <- x$get()
        matrixinverse <- solve(data, ...)
        x$setinverse(matrixinverse)
        matrixinverse
}
